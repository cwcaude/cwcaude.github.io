[ { "title": "SquirrelWaffle Static Analysis", "url": "/posts/SqrlWfl-1/", "categories": "Malware_Analysis", "tags": "", "date": "2022-08-26 21:30:00 +0000", "snippet": "PrefaceThis is the first write-up I’ll be publishing as I delve into malware analysis. For this post I will be using the config extraction work of Sergei Frankoff, co-founder of OpenAnalysis, as a ...", "content": "PrefaceThis is the first write-up I’ll be publishing as I delve into malware analysis. For this post I will be using the config extraction work of Sergei Frankoff, co-founder of OpenAnalysis, as a base for my analysis here. His write-up on writing a config extractor can be found here: OALabs SquirrelWaffle NotesSquirrelWaffle aka DatopLoaderBackground Info / OverviewAccording to malpedia Squirrelwaffle is a simple malware loader distributed as a malicious Office document in spam campaigns. This sample downloads and drops a Cobalt Strike executable as documented by Malware-Traffic-Analysis.net.Static Code Analysisgetenv() : APPDATA &amp; TEMPCode Offset: 0x00583b50The malware first gets the path provided by the APPDATA and TEMP environment variables storing them for use later.IP Blocklist DecryptCode Offset: 0x00583cb4The malware then loads the encrypted IP blocklist and key from memory and runs it through an XOR Decryption function to produce the Decrypted Blocklist. After Decrypting the IP Blocklist the malware gets the machine’s hostname, username, and checks ip against the blocklist.C2 List &amp; File DownloadFunction Offset: 0x00581db0After handling the IP Blocklist, a function is called that handles decrypting the C2 Host List and creates an addrinfo list of each c2 hostname. The addrinfo list is then looped through while attempting for a successful socket to be opened. This loop is annotated in the screenshot below. After successfully opening a connection to a host from the list a file is downloaded and saved to a buffer to be written to a file later.Filename Generation &amp; File WriteFunction Offset: 0x005813a0A filename is generated via a simple function to randomly generate a string and ‘.txt’ is appended to it.Register DLLCode Offset: 0x00584f9fAfter downloading and saving the file, another encrypted block is grabbed and decrypted. This time it’s a WinExec() argument to register the DLL via regsvr32.exe and prevents displaying messages with -s.regsvr32.exe -s *generatedFilename*Start DLLCode Offset: 0x00585188Next a system() call is crafted to execute this newly registered DLL. The system call takes the arguments found below and appends the generated filename to the end. start /i /min /b *generatedFilename*/i: passes the cmd.exe startup environment to the new command prompt window /min: minimizes the command prompt window /b: starts a new application without opening a new command prompt windowFunction AnalysisXOR DecryptFunction Offset: 0x005819b0This malware utilizes a fairly simple XOR Decryption method using a looping key. In this screenshot below you can see my annotated Binary Ninja output where I outline the basic functionality for the decryption.Random String Function DecompilationFunction Offset: 0x005813a0Thanks for readingI hope you found something in this post entertaining or educational! I post these in order to inspire others to work on projects of their own, while developing my skills to perform Technical Write-ups. If you wish to share any projects with me or ask any questions feel free to shoot me an email provided at the footer of this page. Thanks!Extracted Config InformationC2 Hostname Listcelulasmadreenmexico[.]com.mx/Wt793Auagerencial.institutoacqua[.]org.br/XynFkhJAxnmdashboard.adlytic[.]ai/LlvLoc9O3bussiness-z[.]ml/3pdEiqsniifiengineers[.]com/hGVc55g2ebonusvulkanvegas.srdm[.]in/U7oOxmI1mebrouteindia[.]com/JEqGe1hNRtest.dirigu[.]ro/dXf4cS4GPLcablingpoint[.]com/LjDG0hkpperfectdemos[.]com/T6PQGYCMtafrizam.360cyberlink[.]com/f36rjSN5D1giasuphire.tddvn[.]com/miFO43YP9bpriyacareers[.]com/GiTHMPbUassurant.360cyberlink[.]com/DGx4k8U9Hilsig.institutoacqua.org[.]br/tM7tINg2sCUIP BlockList94.46.179[.]80206.189.205[.]25188.242.66[.]4585.75.110[.]21487.104.3[.]136207.244.91[.]17149.230.88[.]16091.149.252[.]7591.149.252[.]8892.211.109[.]152178.0.250[.]16888.69.16[.]23095.223.77[.]16099.234.62[.]232.206.105[.]22384.222.8[.]20189.183.239[.]1425.146.132[.]10177.7.60[.]15445.41.106[.]12245.74.72[.]1374.58.152[.]12388.87.68[.]197109.70.100[.]25185.67.82[.]114207.102.138[.]19204.101.161[.]14193.128.108[.]251111.7.100[.]17111.7.100[.]1674.125.210[.]6274.125.210[.]36104.244.74[.]57185.220.101[.]145185.220.101[.]144185.220.101[.]18185.220.100[.]246185.220.101[.]228185.220.100[.]243185.220.101[.]229185.220.101[.]147185.220.102[.]250185.220.100[.]241199.195.251[.]84213.164.204[.]9474.125.213[.]774.125.213[.]9185.220.100[.]24937.71.173[.]5893.2.220[.]100188.10.191[.]10981.36.17[.]24770.28.47[.]11845.133.172[.]222108.41.227[.]19637.235.53[.]46162.216.47[.]22154.3.42[.]5145.86.200[.]60212.230.181[.]152185.192.70[.]1137.142.65[.]6987.166.51[.]31178.198.76[.]175128.90.172[.]136172.58.227[.]224201.77.112[.]13364.124.12[.]16287.166.51[.]28104.244.72[.]115109.70.100[.]23192.145.127[.]220194.186.142[.]122185.207.249[.]21752.250.42[.]14445.86.201[.]156195.245.199[.]125213.33.190[.]70154.61.71[.]13154.13.1[.]22191.96.185[.]15140.94.25[.]2240.94.25[.]3940.94.25[.]540.94.25[.]7940.94.25[.]6940.94.25[.]7140.94.25[.]6040.94.25[.]6440.94.25[.]2940.94.25[.]2340.94.25[.]8940.94.26[.]16540.94.26[.]21040.94.26[.]20840.94.26[.]16640.94.26[.]21640.94.26[.]17340.94.26[.]18240.94.35[.]7540.94.35[.]9740.94.35[.]2740.94.35[.]3840.94.35[.]4640.94.35[.]7640.94.35[.]7040.94.35[.]8040.94.35[.]9840.94.35[.]4045.86.200[.]23198.167.212[.]9840.94.31[.]8740.94.31[.]8540.94.31[.]2940.94.31[.]9740.94.31[.]8840.94.31[.]8040.94.31[.]65198.167.195[.]11240.94.31[.]5840.94.31[.]4840.94.31[.]6440.94.31[.]2640.94.31[.]6640.94.31[.]9040.94.31[.]4640.94.31[.]47212.119.227[.]18472.12.194[.]9372.12.194[.]9472.12.194[.]92134.209.213[.]5535.198.84[.]5989.208.29[.]240.94.30[.]15940.94.30[.]13940.94.30[.]15240.94.30[.]16740.94.30[.]16440.94.30[.]16640.94.30[.]17440.94.30[.]151154.61.71[.]5340.94.30[.]15740.94.30[.]13640.94.30[.]14952.154.162[.]74213.33.190[.]16183.84.25[.]214162.251.62[.]154188.241.177[.]15292.211.110[.]221154.61.71[.]51185.183.107[.]23672.12.194[.]9040.94.25[.]3640.94.29[.]440.94.25[.]5040.94.29[.]3140.94.25[.]3140.94.29[.]4140.94.31[.]540.94.25[.]8040.94.29[.]8240.94.31[.]8140.94.25[.]9640.94.29[.]5940.94.31[.]340.94.25[.]5840.94.31[.]6140.94.31[.]4940.94.31[.]5440.94.31[.]6240.94.31[.]7040.94.30[.]21140.94.30[.]14840.94.30[.]21840.94.30[.]14740.94.30[.]12940.94.31[.]1540.94.30[.]16940.94.31[.]3640.94.30[.]22340.94.30[.]20395.211.36[.]17964.233.172[.]102153.246.206[.]71198.167.193[.]3590.187.12[.]20937.49.116[.]17952.167.22[.]240160.177.96[.]15185.123.143[.]220167.99.172[.]25340.94.36[.]8186.107.21[.]20324.37.31[.]3871.19.154[.]8434.142.74[.]220192.160.102[.]170216.251.130[.]7449.44.76[.]43109.147.65[.]15786.217.130[.]91178.174.15[.]5486.242.244[.]9792.46.70[.]10581.201.234[.]2678.94.217[.]60141.226.236[.]9195.26.228[.]10289.208.29[.]3213.33.190[.]205213.33.190[.]1215.154.174[.]4523.154.177[.]3195.65.152[.]13893.231.174[.]227185.220.101[.]13254.36.101[.]2172.12.194[.]9146.14.116[.]174141.19.232[.]57185.220.101[.]14945.74.46[.]69157.230.210[.]13382.199.130[.]36104.237.193[.]28187.46.138[.]56195.164.49[.]162156.146.49[.]135195.164.49[.]19179.104.209[.]5435.245.134[.]9020.52.139[.]186189.139.144[.]15194.31.102[.]18739.43.45[.]71107.189.10[.]14339.43.123[.]57106.75.76[.]179194.186.142[.]131210.22.129[.]19445.130.83[.]77154.6.16[.]175162.247.73[.]192107.189.1[.]160185.107.47[.]21546.166.139[.]111185.56.80[.]65185.220.100[.]245209.141.59[.]18077.247.181[.]163185.220.101[.]137185.220.100[.]242104.244.76[.]13185.83.214[.]69185.220.100[.]252185.112.146[.]73185.57.82[.]2889.187.171[.]11666.220.242[.]22239.43.72[.]175.171.90[.]80185.152.32[.]7723.129.64[.]15792.151.9[.]187106.75.31[.]237122.167.79[.]251109.70.100[.]33199.249.230[.]15464.233.172[.]10864.233.172[.]10664.233.172[.]10477.247.181[.]165107.189.12[.]24079.142.76[.]203193.128.114[.]34185.92.26[.]59185.65.210[.]11970.39.159[.]7970.39.159[.]29151.48.26[.]15151.48.26[.]152.228.159[.]178188.174.248[.]154188.174.248[.]15495.90.198[.]18295.90.198[.]182193.0.200[.]36193.0.200[.]36151.127.13[.]23289.97.249[.]158212.115.152[.]225185.217.117[.]179199.249.230[.]16480.233.134[.]134109.74.154[.]9265.39.88[.]25090.84.192[.]18737.70.202[.]2485.203.45[.]30109.190.93[.]219151.8.114[.]194176.235.38[.]106149.56.99[.]85138.128.136[.]169213.82.23[.]224192.42.123[.]107128.90.151[.]188162.245.206[.]24985.203.45[.]4095.211.95[.]242185.220.102[.]25166.203.112[.]160193.128.108[.]246193.128.108[.]24231.204.150[.]7434.141.245[.]25122.167.85[.]191212.6.86[.]133171.25.193[.]25149.3.170[.]147162.247.74[.]217109.70.100[.]3489.208.29[.]579.104.209[.]9179.104.209[.]157194.186.142[.]205198.167.217[.]20198.167.193[.]112204.101.161[.]31198.167.219[.]82195.74.76[.]22270.93.153[.]22487.118.110[.]27185.247.225[.]43193.128.108[.]250188.212.135[.]7106.75.75[.]24586.142.177[.]106185.192.69[.]77198.167.209[.]3759.144.163[.]235193.128.108[.]24331.204.152[.]150211.177.21[.]22287.166.49[.]3982.127.202[.]17658.40.175[.]694.46.179[.]80206.189.205[.]251178.255.172[.]19484.221.205[.]40155.138.242[.]103178.212.98[.]15685.65.32[.]19131.167.184[.]20188.242.66[.]4536.65.102[.]42203.213.127[.]7985.75.110[.]21493.78.214[.]187204.152.81[.]185183.171.72[.]218168.194.101[.]13087.104.3[.]13692.211.196[.]33197.92.140[.]125207.244.91[.]17149.230.88[.]160196.74.16[.]15391.149.252[.]7591.149.252[.]8892.206.15[.]20282.21.114[.]6392.211.109[.]152178.0.250[.]168178.203.145[.]13585.210.36[.]4199.83.207[.]7286.132.134[.]20388.69.16[.]23099.247.129[.]8837.201.195[.]1287.140.192[.]088.152.185[.]18887.156.177[.]9199.229.57[.]16095.223.77[.]16088.130.54[.]21499.234.62[.]232.206.105[.]22394.134.179[.]13084.221.255[.]19984.222.8[.]20189.183.239[.]14287.158.21[.]2693.206.148[.]2165.146.132[.]10177.7.60[.]15495.223.75[.]85162.254.173[.]18750.99.254[.]16345.41.106[.]12299.237.13[.]345.74.72[.]13108.171.64[.]20274.58.152[.]123216.209.253[.]12188.87.68[.]197211.107.25[.]121109.70.100[.]25185.67.82[.]114207.102.138[.]19204.101.161[.]14193.128.108[.]251111.7.100[.]17111.7.100[.]1674.125.210[.]6274.125.210[.]36104.244.74[.]57185.220.101[.]145185.220.101[.]144185.220.101[.]18185.220.100[.]246185.220.101[.]228185.220.100[.]243185.220.101[.]229185.220.101[.]147185.220.102[.]250185.220.100[.]241199.195.251[.]84213.164.204[.]9474.125.213[.]774.125.213[.]9177.38.183[.]13185.220.100[.]249" }, { "title": "Reverse Engineering Vehicle Update Files", "url": "/posts/update-analysis/", "categories": "Reverse_Engineering", "tags": "", "date": "2020-11-25 20:00:00 +0000", "snippet": "Backstory / IntroductionI own a relatively new Dodge vehicle, one new enough to have a touch screen infotainment system, and require system updates. Well recently my vehicle was prompted with an up...", "content": "Backstory / IntroductionI own a relatively new Dodge vehicle, one new enough to have a touch screen infotainment system, and require system updates. Well recently my vehicle was prompted with an update, and I became curious as to what this update file actually contained. So I navigated to Dodge’s update website, downloaded the respective update file, and tried to see what I could learn about it. These are some of the things I learned and was able to find out about this file.Update ContentsThe first thing I wanted to do was see what files I had to work with. Unzipping the file presented me with the following files:checkswdl.batKaliSWDL.logmd5deepswdl.updswdl.upd.md5KaliSWDL.logThis file contains the output of what I assume is the compilation or packing of this update file. Not too much interesting information is found here.md5deep.exeThis file is an executable that performs and md5 hash of a file. This is used later to check the update file against a known correct hash.checkswdl.bat‘checkswdl’ is a batch script that runs the output of md5deep with swdl.upd and compares it against swdl.upd.md5. This ensures the hash is correct and that the file was successfully downloaded without corruption or issues. It also contains these cool ASCII art drawings to give you visual of whether or not the file passes the hash check.File Passed: _@_ ((@)) ((@)) ((@)) ______===(((@@@@====) ##########@@@@@=====)) ##########@@@@@----)) ###########@@@@----) ========-----------: !!! FILE IS GOOD !!!!:File Failed: .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-. | ______ | | .-\" \"-. | | / \\ | | _ | | _ | | ( \\ |, .-. .-. ,| / ) | | &gt; \"=._ | )(__/ \\__)( | _.=\" &lt; | | (_/\"=._\"=._ |/ /\\ \\| _.=\"_.=\"\\_) | | \"=._\"(_ _)\"_.=\" | | \"=\\__|IIIIII|__/=\" | | _.=\"| \\IIIIII/ |\"=._ | | _ _.=\"_.=\"\\ /\"=._\"=._ _ | | ( \\_.=\"_.=\" `--------` \"=._\"=._/ ) | | &gt; _.=\" \"=._ &lt; | | (_/ \\_) | | | '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=' : *** FILE IS BAD *** :swdl.upd.md5This is the known good hash of the update file. This again is used in checkswdl.bat in order to ensure the update file was downloaded correctly.MD5(swdl.upd)= 536fb9f643beb374bc9be69d129436b3swdl.updFinally that brings us to swdl.upd, this is the meat and potatoes of the whole post. This is the update file and contains the interesting stuff I really want to take a look at. The rest of this post will be the dive into figuring out how to look at the stuff found in this file.Dissecting the UpdateNow that we know everything contained in this file, how do I actually find the interesting stuff to view within the file?What kind of file is this anyway?Well in order to find out what kind of file I am working with, I first decided to use the wonderful linux tool file. Here you can see the return from this tool.$ file swdl.updswdl.upd: ISO 9660 CD-ROM filesystem data 'CDROM'So it appears to be a CD-ROM file, we can actually confirm this by taking a look at the KaliSWDL.log file we found earlier.Warning: Creating ISO-9660:1999 (version 2) filesystem.Near the bottom of this log we can find this line, which references the ISO-9660 filesystem being created.What’s in this thing?The next step I wanted to do was to see what I could find out about the contents of this file. To do this is pretty straight forward as I used another tool called binwalk in order to see what it could find out about the file and its contents. Now I won’t post the full output of the tool, as it is quite large. However I will provide a few snippets that allows you to see exactly what has been output from the tool.DECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------172032 0x2A000 ELF, 32-bit LSB executable, ARM, version 1 (SYSV)245760 0x3C000 ELF, 32-bit LSB executable, ARM, version 1 (SYSV)339800 0x52F58 Unix path: /etc/system/config/nand_partition.txt363816 0x58D28 Unix path: /../../libgcc/../gcc365162 0x5926A Unix path: /../../libgcc/../gcc/config/arm365683 0x59473 Unix path: /../../libgcc/../gcc367524 0x59BA4 Unix path: /../../libgcc/../gcc/libgcc2.c400331 0x61BCB Unix path: /etc/system/config/nand_partition.txt )427192 0x684B8 Unix path: /fs/etfs/tmp/tracelog/traces.log427259 0x684FB Unix path: /fs/etfs/tracescopes/links/HMI.hbtc427321 0x68539 Unix path: /fs/etfs/usr/share/flash/scopes/scopelistFrom this first snippet of showing the first few files discovered in the file, you can see some interesting things. Firstly there are two ELF files that appear to be compiled for ARM, these are interesting and I may have to dissect them in their own post sometime in the future. But overall you can see that the output is providinga hexadecimal offset to each different file provided in the output. As well as a description, or filepath name. As this output is 75,000 lines long I will spare you the full log. However I will be highlighting specific snippets as I pulled out data from this file.“Cutting out” filesNow that I essentially had a map of the files contained within this file, I can begin cutting out files I have an interest in. To do this I will use another linux tool, dd. This tool functions by directly copying chunks of data from specific offsets of a file to another file. Since I have the offset of each file and the file following it. I can simply copy the middle section between those offsets in order to grab the files I desire. Let’s find something I want to extract:550015658 0x20C892AA Zip archive data, at least v2.0 to extract, compressed size: 1527, uncompressed size: 1821, name: res/images/logo-lrg.png550017238 0x20C898D6 Zip archive data, at least v2.0 to extract, compressed size: 1167, uncompressed size: 1473, name: res/images/logo-sml.pngSo here we can see this logo-lrg.png file I desire to pull out of the update. Using dd and the provided offsets I should be able to pull this file out relatively easily.dd if=swdl.upd of=logo-lrg.zip bs=1 skip=$((0x20C892AA)) count=$((0x20C898D6-0x20C892AA))I’ll quickly explain what each option does in this command:if=You specify the input file to the tool, or the file you will be extracting from. ### of= You specify the output file here, or the file you will be writing to. ### bs=You can specify the block size to be copied here, you can make this larger to copy things faster. However if you make this larger you will have to divide the next options by this same value in order to account for the change in block size. I will leave this '1' for clarity's sake. ### skip=Here you give the offset to the beginning of the file you wish to extract. ### count=This is how many blocks of data you will be copying from the file. In order to get this value, you can subtract the next file's initial offset from the file you wish to copy. The difference between these values is the number of 'blocks' in the file. In our case since a block is a single byte, it is the number of bytes between the two offsets. Running this command given above provides the following output:1580+0 records in1580+0 records out1580 bytes (1.6 kB, 1.5 KiB) copied, 0.0219515 s, 72.0 kB/sAnd also we can see a new logo-lrg.zip file in our directory. So let’s open that up and view our picture.Erm, what happened? I thought this would work. I can see the files within the zip, but when I attempt to extract the png to view it I keep getting this error. Well after checking… and checking… and checking my dd options to ensure I did everything correct I finally figured out you can just repair archives through Winrar. Well let’s give this a shot…TA-DA!I successfully pulled out the logo file and prove now I can get any file I want from this update file.What else can I find?Now that we can successfully pull files out of this update, what is there for me to find within this file? Aside from random images and the two ELF binaries I found earlier, most of what I found are random text files and a whole heck of a lot of .class files. After digging into a bunch of text files finding nothing, I decided to figure out how to examine these .class files.Decompiling .class filesSo I got one of these .class files extracted, now what? Now I have never worked with Java before, however I know enough to at least recognize this is a Java. So I began digging to find out how to pull this file apart and see what’s inside. Opening it directly in a text editor is no help as it just seems like a garbled mess of characters. This led me to believe that it was compiled in some way, (again I know very little about Java). So I began searching for ways to decompile Java files. I came across a tool simply called Java Decompiler, specifically I was interested in using JD-GUI a standalone utility that would hopefully allow me to decompile this class file. Opening this tool, you are presented with a very easy to use GUI that just lets you navigate to the file you wish to decompile and open it.The file I decided to try and decompile first was a file called SteeringWheelAngleUpdate.class. Success!import GuiData.SensorDataUpdate;import InternalInterface.SteeringWheelAngleUpdate;import com.uniquesoft.tdl.system.SystemUtils;import com.uniquesoft.tdl.system.TDLObject;public class SteeringWheelAngleUpdate implements TDLObject { public SensorDataUpdate sensor_data; public void destroy() {} public boolean equals(SteeringWheelAngleUpdate copy) { return SystemUtils.tdlEquals(this.sensor_data, copy.sensor_data); } public boolean excleq(TDLObject copy) { return !equals(copy); } public boolean equals(Object copy) { if (getClass() == copy.getClass()) return equals((SteeringWheelAngleUpdate)copy); return false; } public int hashCode() { return 0x1 ^ ((this.sensor_data == null) ? 0 : this.sensor_data.hashCode()); } public SteeringWheelAngleUpdate deepCopy() { return new SteeringWheelAngleUpdate(this); } public SteeringWheelAngleUpdate(SteeringWheelAngleUpdate copy) { this.sensor_data = copy.sensor_data; } public SteeringWheelAngleUpdate() {} public SteeringWheelAngleUpdate(SensorDataUpdate sensor_data) { this.sensor_data = sensor_data; }}Opening this file within JDGUI I was greeted with a decompiled version of the original Java file. I now had a way to view any of these Java files I desired.That’s all! For Now…Well I accomplished my original goal of learning what exactly is in these update files. Now I must decide what I want to do next? I originally went into this desiring to make my own custom themes for the system. I did manage to find the theme files in the Shockwave Flash format, so there is potential there to build my own custom ones. Maybe I’ll reverse engineer those ELF Binaries I found to see what I can find. For now though I am satisfied with what I have learned so far.Thanks for readingI hope you found something in this post entertaining or educational! I post these in order to inspire others to work on projects of their own. If you want to share any projects with me or ask any questions feel free to shoot me an email provided at the footer of this page. Thanks!" }, { "title": "iOS Tweak Development : 5", "url": "/posts/iOS-tweak-dev-5/", "categories": "iOS_Tweak_Development", "tags": "", "date": "2020-07-22 20:00:00 +0000", "snippet": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and...", "content": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and document my journey/path of learning to develop iOS tweaks. If you desire for strictly a tutorial in iOS Tweak Development check out these links here :Zane Helton or r/Jailbreak TutorialRecapping my ReleaseSo in just two short weeks of learning iOS Tweak Development I successfully released my first tweak. Albeit a very non-complicated tweak, I am hoping to add more functionality to this. Aside from the previous post in which I gave the link to my repo I also made a release post on the r/Jailbreak subreddit. The link to that post can be found here. I had a pretty successful release and got some good feedback on the tweak!What now?Well my purpose with this tweak has been to learn more techniques and methods used in developing tweaks. So with that I will add more functionality to the tweak. And hopefully take some reccomendations/requests I got in my Reddit posts to add this functionality. I also want to make an icon for the tweak to show in the settings app.#Want to install this tweak?You can install this right now from Cydia from the repo here: https://cwcaude.github.ioAny issues you have with this tweak should be posted as an issue to the Github page. Link HereWhat next?" }, { "title": "iOS Tweak Development : 4", "url": "/posts/iOS-tweak-dev-4/", "categories": "iOS_Tweak_Development", "tags": "", "date": "2020-07-16 20:00:00 +0000", "snippet": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and...", "content": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and document my journey/path of learning to develop iOS tweaks. If you desire for strictly a tutorial in iOS Tweak Development check out these links here :Zane Helton or r/Jailbreak TutorialAdding Settings options to my TweakThe next thing I wanted to learn is how to add a settings option to my tweak, this is how I did it.Creating a Preference BundleIn the settings app, each app that is listed has what is called a Preference Bundle. This Preference Bundle is what determines how the settings app will look and behave. To create a preference bundle that is linked with your current tweak, run $THEOS/bin/nic.pl from within the directory of your tweak and create a preference bundle modern.Important Files in the Preference BundleI will not be covering every file within the directory, however I will be listing the important ones I needed to modify.entry.plistWithin this file, you can find the Label that will be seen from the main page of the settings application. As well as the name of the icon file that will be displayed on that page as well.MSPRootListController.h &amp; .mIt is within these files that you can create new methods to be used as actions within your preferences page.Resources/Root.plistHere is where you will build your preferences page in XML. Each part of the preference page is called a cell, and within this file you can define the type of cell as well as modify properties of each cell. I will go into more detail on this later.Resources/Info.plistNot much (if anything) in this file is required to be modified, however this is where the bundle identifier is stored and can be modified. This is used by your tweak to access your preferences, as well as used by the OS to create the bundle to be saved.First stepsThe first thing I did was begin building out the preferences page to include what I wanted for my tweak. I wanted: Enable Switch, Custom Text Switch, Custom Text Box, Website Link, and Donation Link. To add these sections to the preferences page I modified the Resources/Root.plist file. This file uses xml in order to build the page. In order to learn how to actually use this I used Zane Helton’s Tutorial and iPhoneDevWiki’s Site. To explain it quickly, each page is made up of cells, you can view the different types of cells from iPhoneDevWiki’s Site.Building the preferences pageThe file is structured as an array of dictionaries, each dictionary specifies a cell. Here is an example of what a cell looks like:\t&lt;dict&gt;\t\t&lt;key&gt;cell&lt;/key&gt;\t\t&lt;string&gt;PSSwitchCell&lt;/string&gt;\t\t&lt;key&gt;default&lt;/key&gt;\t\t&lt;true/&gt;\t\t&lt;key&gt;defaults&lt;/key&gt;\t\t&lt;string&gt;com.ziegen.messageswappreferences&lt;/string&gt;\t\t&lt;key&gt;key&lt;/key&gt;\t\t&lt;string&gt;isEnabled&lt;/string&gt;\t\t&lt;key&gt;label&lt;/key&gt;\t\t&lt;string&gt;Enabled&lt;/string&gt;\t&lt;/dict&gt;This cell type is a PSSwitchCell, this is denoted using the ** **cell** and following it with a ** of the cell type. Again these cell types can be found on [iPhoneDevWiki's Site](https://iphonedevwiki.net/index.php/Preferences_specifier_plist).Using the default key you can specify a default value for the cell, in the example above considering the cell type is a switch I set the default value to . However if the cell was a PSEditTextCell like I use for the custom text, I would set the default to a ** value.In order to add persistence to the values of these cells you need to use the defaults key. You need to set this value to the bundle identifier you have specified in your Info.plist file, in my case it is com.ziegen.messageswappreferences. Directly following the defaults key, you need to set a key key which allows you to set a name to the value you are storing, you can think of it as naming the variable you are saving. You should set this name to be something unique that you can use to differentiate each value. In my example, because this switch controls whether or not the tweak is enabled or not, I set the name to isEnabled.Finally the last part of this example you can see the label key, this sets the (you guessed it) label shown on the settings page.Grouping CellsIn order to group cells within this array you can define a new cell of PSGroupCell, every cell following this cell until the next PSGroupCell is included within that group. Here is an example of a group cell:\t&lt;dict&gt;\t\t&lt;key&gt;cell&lt;/key&gt;\t\t&lt;string&gt;PSGroupCell&lt;/string&gt;\t\t&lt;key&gt;label&lt;/key&gt;\t\t&lt;string&gt;Settings&lt;/string&gt;\t&lt;/dict&gt;As you can see it’s a rather simple cell, with only the cell specifier and a label to display above the cell.Adding actions to the buttons on the Settings pageIn order to add actually functionality to the buttons on the settings page, you must create a method within the MSPRootListController.m file to be executed when the button is pressed. In my example, my buttons simply open websites. This is the code for that method to be included within the MSPRootListController implementation:-(void)openWebsite{\t[[UIApplication sharedApplication]\topenURL:[NSURL URLWithString:@\"https://cwcaude.github.io/\"]\toptions:@{}\tcompletionHandler:nil];}Full FileHere I am going to paste the full Root.plist file and a screenshot of what it looks like so you can compare directly how each line affects the page. It may look overwhelming at first, but it is very easy to understand if you take a moment to analyze it.&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;&lt;plist version=\"1.0\"&gt;&lt;dict&gt;\t&lt;key&gt;items&lt;/key&gt;\t&lt;array&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSGroupCell&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Settings&lt;/string&gt;\t\t&lt;/dict&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSSwitchCell&lt;/string&gt;\t\t\t&lt;key&gt;default&lt;/key&gt;\t\t\t&lt;true/&gt;\t\t\t&lt;key&gt;defaults&lt;/key&gt;\t\t\t&lt;string&gt;com.ziegen.messageswappreferences&lt;/string&gt;\t\t\t&lt;key&gt;key&lt;/key&gt;\t\t\t&lt;string&gt;isEnabled&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Enabled&lt;/string&gt;\t\t&lt;/dict&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSSwitchCell&lt;/string&gt;\t\t\t&lt;key&gt;default&lt;/key&gt;\t\t\t&lt;false/&gt;\t\t\t&lt;key&gt;defaults&lt;/key&gt;\t\t\t&lt;string&gt;com.ziegen.messageswappreferences&lt;/string&gt;\t\t\t&lt;key&gt;key&lt;/key&gt;\t\t\t&lt;string&gt;isCustom&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Custom Text&lt;/string&gt;\t\t&lt;/dict&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSGroupCell&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Custom Text to Display&lt;/string&gt;\t\t&lt;/dict&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSEditTextCell&lt;/string&gt;\t\t\t&lt;key&gt;default&lt;/key&gt;\t\t\t&lt;string&gt;Custom&lt;/string&gt;\t\t\t&lt;key&gt;defaults&lt;/key&gt;\t\t\t&lt;string&gt;com.ziegen.messageswappreferences&lt;/string&gt;\t\t\t&lt;key&gt;key&lt;/key&gt;\t\t\t&lt;string&gt;displayText&lt;/string&gt;\t\t&lt;/dict&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSGroupCell&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Credits&lt;/string&gt;\t\t&lt;/dict&gt;\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSButtonCell&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Learn how I made this tweak&lt;/string&gt;\t\t\t&lt;key&gt;action&lt;/key&gt;\t\t\t&lt;string&gt;openWebsite&lt;/string&gt;\t\t&lt;/dict&gt;\t\t\t\t&lt;dict&gt;\t\t\t&lt;key&gt;cell&lt;/key&gt;\t\t\t&lt;string&gt;PSButtonCell&lt;/string&gt;\t\t\t&lt;key&gt;label&lt;/key&gt;\t\t\t&lt;string&gt;Buy me a Coffee&lt;/string&gt;\t\t\t&lt;key&gt;action&lt;/key&gt;\t\t\t&lt;string&gt;openDonation&lt;/string&gt;\t\t&lt;/dict&gt;\t&lt;/array&gt;\t&lt;key&gt;title&lt;/key&gt;\t&lt;string&gt;Message Swap&lt;/string&gt;&lt;/dict&gt;&lt;/plist&gt;Modifying the tweak to use this Preference Bundle DataIn the last post I developed the Tweak.xm to modify the values with a hard-coded value. However with this new preferences page I need to add the ability to modify the tweak with different settings changed within the preference page. To do this I created some new functions to access this data from the plist bundle.#define PLIST_PATH @\"/var/mobile/Library/Preferences/com.ziegen.messageswappreferences.plist\"inline bool GetPrefBool (NSString *key){\treturn [[[NSDictionary dictionaryWithContentsOfFile:PLIST_PATH] valueForKey:key] boolValue];}NSString* GetPrefString (NSString *key){\treturn [[[NSDictionary dictionaryWithContentsOfFile:PLIST_PATH] valueForKey:key] stringValue];}Here you can see I defined the PLIST_PATH so that it can be more easily used within the functions defined below it.Each of these functions queries the plist bundle file and accesses the preferences saved via the defaults we set up earlier. Each function returns a specific type of value, for example the GetPrefBool returns boolean values that could be given from a switch. While the GetPrefString returns a value that returns a string value from a text box. Another function I could make would be one that would return a float.In order to get the value you want from these functions you would make a call like this GetPrefBool(@\"isEnabled\") Here you can see I am returning a Boolean value from the key “isEnabled”, this will of course return the status of our enabled switch. Here you can see both of the functions utilized with a hook to control the program using these values from the preference bundle:%hook _UINavigationBarLargeTitleView\t-(void)setTitle: (id)arg1 {\tif (GetPrefBool(@\"isEnabled\"))\t{\t\t\t\tif (GetPrefBool(@\"isCustom\"))\t{\t\t\t%orig(GetPrefString(@\"customText\"));\t\t}\t\telse {\t\t\t%orig(@\"Intel\");\t\t}\t}\telse {\t\t\t%orig(@\"Messages\");\t\t}}%endHere the GetPrefBool function is used as the argument in simple if/else statements to control the flow of the tweak since it will return a true or false value. The GetPrefString function is used as the argument to the %orig() call to give the string of the custom text stored in the specified key.How’d it turn out?Screenshot with the tweak disabled:Screenshot with the tweak enabled but custom disabled:Screenshot with Custom enabled:Obligatory Meme Screenshot:Want to install this tweak?You can install this right now from Cydia from the repo here: https://cwcaude.github.ioAny issues you have with this tweak should be posted as an issue to the Github page. Link HereWhat next?This tweak now looks like it’s something presentable! However now I want to add more functionality to the tweak such as an unread messages counter, and controlling the color of that text. So that is what I’ll be working on for next post! If you are enjoying these posts and would like to support me I have a donation link down below. Any questions or comments about this post can be sent to my email and I will try to respond quickly!" }, { "title": "iOS Tweak Development : 3", "url": "/posts/iOS-tweak-dev-3/", "categories": "iOS_Tweak_Development", "tags": "", "date": "2020-07-12 20:00:00 +0000", "snippet": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and...", "content": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and document my journey/path of learning to develop iOS tweaks. If you desire for strictly a tutorial in iOS Tweak Development check out these links here :Zane Helton or r/Jailbreak TutorialBuilding my own tweakNow that I have researched some open source tweaks, it’s time to attempt my own tweak. For this tweak I want to modify the Messages app to replace the word ‘Messages’ at the top with a different word. To do this during the creation of the tweak template using Theos/nic.pl I made sure to set the Mobile Substrate Bundle Identifier to com.apple.MessageSMS. This will allow me to hook into the Messages app process and modify what I desire.Finding what to modifyIn order to begin developing the tweak I used FLEXing to study the Messages application and find what to modify.Here I use the select function to select the part of the application I want to modify. From there I can view the View that I have selected and look at all the methods I can hook into.I found a method called setText that I could hook into to attempt to change the value.Hooking setTextWithin the Theos tweak I have setup I hook into the UILabel view. From here I call the setText method and change the argument to “Intel” as that is the text I am attempting to change it to. Here is the entire Tweak.x file to do that:@interface UIInterface : UILabel@end%hook UILabel\t\t-(void)setText:(id)arg1 {\t\t\t%orig(@\"Intel\");\t\t}%endNow all I have to do is install the tweak and see what happens.Well it certainly changed some text to Intel, but definitely not what I expected to happen. Here we can see that every single instance of a UILabel except, ironically, for the “Messages” text has been changed to “Intel”. So obviously it’s back to the drawing board on this one.Exploring other optionsIn order to find other possible solutions to this I first went to the Internet. I was looking for a solution on how to access a specific UILabel. While browsing answers I found this Reddit Post where the user was asking about a similar tweak idea but in the Mail application. A solution given is to hook the MailboxPickerController and set the title text within another method. This leads to me looking through FLEXing and Limneos to find an equivalent MessagePickerController or SMSPickerController and could not find anything for a really long time. I eventually give up on this and finally after way too long went back to using Select in FLEXing.I found that one step above the UILabel that displays the “Messages” text there is a view called _UINavigationBarLargeTitleView. Within this view there is a method called setTitle. So I decided to try and hook into this view and access this method.Let’s try this againHere again you can see me hook into the view, and access the setTitle Method. After I get%hook _UINavigationBarLargeTitleView\t\t-(void)setTitle: (id)arg1 {\t\t\t%orig(@\"Intel\");\t\t}%endLet’s install this tweak and see what happens.As you can see I successfully changed the text! However I noticed when I scroll down and the text gets smaller, it shows “Messages” again. No problem, I’ll just use FLEXing again and view what is above the UILabel view. This time I find _UINavigationBarContentView, also with the method setTitle. In order to modify this view I add this to the Tweak.x file and reinstall:%hook _UINavigationBarContentView\t\t-(void)setTitle: (id)arg1 {\t\t\t%orig(@\"Intel\");\t\t}%endOnce again this worked and I achieved my goal! Though it may seem like a trivial accomplishment and amount of code, this success has given me confidence in the fact that I know something about what I am doing. This motivation will allow me to continue learning and developing more complicated tweaks.What next?Now that I have developed this simple tweak, I now want to learn how to make it customizable within the settings application. So that is what I will be developing for next week! Thanks for reading! View the next post here." }, { "title": "iOS Tweak Development : 2", "url": "/posts/iOS-tweak-dev-2/", "categories": "iOS_Tweak_Development", "tags": "", "date": "2020-07-04 20:00:00 +0000", "snippet": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and...", "content": "NoteThis series of posts is not made as strictly a tutorial While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and document my journey/path of learning to develop iOS tweaks. If you desire for strictly a tutorial in iOS Tweak Development check out these links here :Zane Helton or r/Jailbreak TutorialStudying Open Source TweaksIn order to begin learning the methods of developing tweaks I began by looking at open source tweaks. This would allow me to understand how properly developed tweaks should look before I begin developing my own.A list of tweaks that are open source can be found on iPhoneDevWiki. The tweak I decided to focus on for this post is counter. While that tweak is not listed on iPhoneDevWiki’s list I found ConorTheDev’s Github from another tweak listed on that page.On the Github for counter you will be greeted with a few files, the notable ones to tweak development are: CounterManager.h, CounterManager.m, Makefile, Tweak.x, control, and counter.plist. I will go through these one by one and explain the importance of each.Note: You can also find a folder called Module. This folder contains the code that modifies the control center to display the unlock count. I will potentially cover those files in a later post as the files in the main directory suit the needs I have with this specific post.CounterManager.hThis file is an Objective-C Interface file. It contains the declaration of two classes, NSDistributedNotificationCenter and CounterManager. A more in depth explanation of this filetype can be found on Tutorials Point. The CounterManager class contains the properties and methods used by the tweak to hold and update the value of unlocks.CounterManager.mThis file is an Objective-C Implementation file. It contains the definition of the previously defined class CounterManager. An more in depth explanation of this filetype can be also be found on Tutorials Point. Within this file you can review the different methods of CounterManager, these methods allow the count to be incremented, reset, and synchronized. The code for these is quite simple and easy to understand. This count value will then be accessed and used later on after hooking into the control center process.MakefileThis file is automatically generated by the nic.pl component of the Theos tool discussed in the previous post. Makefiles are very commonly used files that assist in the building/compiling and cleaning of programs. You can find more information on the usefulness and functionality of these files hereTweak.xThis file is a Logos file. This is where the magic happens, or just where the existing code gets hooked and modified. I’m going to break this file down more specifically and focus on the specifics of this code.#import \"CounterManager.h\"#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)BOOL previouslyLocked = YES;In this block of code you can find the importing of the interface file discussed earlier, as well as a #define and declaration of a variable to be used later in the code.%hook Controller- (void)setAuthenticated:(BOOL)authenticated { %orig; if(authenticated &amp;&amp; previouslyLocked) { [[CounterManager sharedInstance] incrementUnlockCount]; } previouslyLocked = !authenticated;}- (void)setInScreenOffMode:(BOOL)screenOff { %orig; previouslyLocked = screenOff ? YES : previouslyLocked;}%endThis block of code is where you find most of the information that we came to learn from this tweak. At the top of the block you can find where it hooks into the Controller Header with %hook Controller. From there it accesses the method setAuthenticated with - (void)setAuthenticated:(BOOL)authenticated {. If you are unfamiliar with Object Oriented Programming, a method is simply a function that specifically belongs to a class. So here we can see that the setAuthenticated method returns a (void) value, and accepts a boolean authenticated value; (BOOL)authenticated.Within this method the Logos code calls the original code of the method with %orig;, and then adds a statement to the method after that. This statement checks if the device was authenticated, or unlocked, and ensures that it was previously locked. If both of those were true the Unlock count would be incremented by calling the incrementUnlockCount method within the CounterManager class. It then sets the previouslyLocked value to the opposite of the authenticated value. I believe this is to ensure the proper value of previouslyLocked in any chance of faulty scheduling.After this the logos code accesses the setInScreenOffode method where it calls the original method code and then sets the value previouslyLocked to true if the screen is currently off.The file then ends the hook with %end%ctor { %init(Controller = NSClassFromString(SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@\"13\") ? @\"CSCoverSheetViewController\" : @\"SBDashBoardViewController\"));}%ctor generates an anonymous constructor. A constructor is a subroutine that is used to create an object and will often take arguments to properly set the member variables of said objects. Here you can see the constructor generate a view controller object.controlThis file is also generated by nic.pl however it is modified with the text according to the developers specificities. This is used to provide package managers with the information about the package.counter.plistThis file contains which applications need to be restarted upon installing this tweak. This is used so the tweak can be loaded automatically upon installing the tweak. In this case you can see it requires to restart com.apple.springboard, this is commonly referred to as respringing in iOS jailbreaking.What next?Now that I have studied a few open source tweaks similar to how I took apart this tweak. It’s time for me to jump in and try and develop my own tweak. In the next post I will be explaining the entire process of me attempting to develop a relatively simple tweak. Thanks for reading!View the next post here." }, { "title": "iOS Tweak Development : 1", "url": "/posts/iOS-tweak-dev-1/", "categories": "iOS_Tweak_Development", "tags": "", "date": "2020-07-02 20:00:00 +0000", "snippet": "NoteThis series of posts is not made as strictly a tutorial. While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain an...", "content": "NoteThis series of posts is not made as strictly a tutorial. While I will be explaining how things work and giving instruction on iOS tweak development, the purpose of this posting is to explain and document my journey/path of learning to develop iOS tweaks. If you desire for strictly a tutorial in iOS Tweak Development check out these links here :Zane Helton or r/Jailbreak TutorialWhat are iOS Tweaks?iOS Tweaks are used by Jailbroken iOS users to modify parts of the system or applications. These modifications can be for anything from customization to adding functionality. These tweaks are installed and managed from a package manager such as Cydia or Zebra.What language are tweaks written in?The language that the majority iOS tweaks are written in is Logos. However Logos is technically a pre-processor for Objective-C. This means that Logos is used to hook into the original compiled code from iOS and from there use Objective-C like calls in order to modify or make changes to the processes.Getting Started : The First StepsSo as I have been jailbreaking for many years I have had some interest in tweak development before. This allowed me to have already done what I consider to be a crucial first few steps. These step(s) being simply researching and getting any knowledge I can about X topic. I do this so that I am at least semi-familiar with some parts of the topic. The goal is not to become an expert, but instead to become less overwhelmed by the lack of knowledge. One source of information I went to was the Jailbreak Developer Subreddit, here I just browsed some questions and got myself familiar with some of the different aspects to iOS Tweak Development.Getting Started : Finding ToolsOne thing I learned from my time researching iOS tweak development is that there are a number of different tools that have been developed to help assist tweak devs. I am not going to give tutorials here on installation as it may look different depending upon your circumstances. The first and most important tool is Theos. Theos is a suite of tools that consists of a handful of important components such as: - A project templating system (NIC), which creates ready-to-build empty projects for varying purposes - A robust build system driven by GNU Make, capable of directly creating .deb packages for distribution in Cydia - Logos, a built-in preprocessor-based library of directives designed to make MobileSubstrate extension development easyFor my basic purposes currently, Theos is where I go to create a template for each of my tweak projects.The next tool I found is called FLEXing. This tool is an opensource tool that allows you to view and modify the inner workings of your iOS applications or System. Essentially the way you can view it is similar to Inspect Element or developer tools from web browsers, being that you can debug and modify the current running application. This functionality is priceless when it comes to tweak development because the alternative is to look through iOS Headers and attempting to make sense of each method and class of the specific framework I’m interested in do.Getting Started : Installing my first “personal” tweakFor my first tweak I just wanted to ensure that I had everything working properly, and that I understood the steps of compiling then installing a tweak. A bit of a ‘Hello World’ if you will. So I copied an example tweak I found into a Theos generated template with default settings and ran the very handy Makefile generated by Theos. This tweak was rather simple it simply draws a red rectangle on the lockscreen :@interface SBLockScreenViewControllerBase : UIViewController@end%hook SBLockScreenViewControllerBase- (void)viewDidLoad {\t%orig;\t// our code\tUIVisualEffectView *redRectangle = [[UIVisualEffectView alloc] initWithFrame:CGRectMake(0, 0, 200, 200)];\t[redRectangle setBackgroundColor:[UIColor redColor]];\t[self.view addSubview:redRectangle];}%endAnd just like that I had successfully installed my first tweak from my MacBook! But now I had to understand what actually made it do that.Thank you!I hope you found this both informative and entertaining. In the next post I will be sharing what I have learned about developing my own iOS Tweaks from scratch. View the next post here." }, { "title": "Hello World!", "url": "/posts/Hello-World/", "categories": "General", "tags": "", "date": "2019-06-17 20:00:00 +0000", "snippet": "printf(\"Hello World!\");Hello and welcome to my website! On this website I will be highlighting some of the projects I am working on, as well as discussing topics that may interest me. Please take s...", "content": "printf(\"Hello World!\");Hello and welcome to my website! On this website I will be highlighting some of the projects I am working on, as well as discussing topics that may interest me. Please take some time to check out some of my posts and projects that are posted here. I hope you enjoy! For any and all inquiries you can reach me by email at caudellclay@gmail.com" } ]
